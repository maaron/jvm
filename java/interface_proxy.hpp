#pragma once

#include "interface_proxy.h"

extern "C"
{
	jobject JNICALL NativeInvocationHandler_invokeNative(
		JNIEnv* env,
		jobject self,
		jlong ptr,
		jobject methodObj,
		jobjectArray args)
	{
		java::invocation_handler_func* ptrHandler = reinterpret_cast<java::invocation_handler_func*>(ptr);
		auto ret = (*ptrHandler)(java::method(methodObj), args);

		// This is absolutely critical.  We must create an additional reference to 
		// the object we are returning, as the java::object returned by 
		// java::create() will release it's reference to the object as the function 
		// is returning.  If we don't get an additional reference, the object will 
		// basically be destroyed before the JVM can use it.
		return java::internal::get_env()->NewLocalRef(ret.box().native());
	}

	void JNICALL NativeInvocationHandler_finalizeNative(
		JNIEnv* env,
		jobject self,
		jlong ptr)
	{
		java::invocation_handler_func* ptrHandler = reinterpret_cast<java::invocation_handler_func*>(ptr);
		delete ptrHandler;
	}
}

namespace java
{
	static unsigned char class_data[] = {
		0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x34, 0x00, 0x3b, 0x07, 0x00, 0x21, 0x0a, 0x00, 0x01, 0x00, 0x22, 0x0a, 0x00, 0x04, 0x00, 0x23, 0x07, 0x00, 0x24, 0x0a, 0x00, 0x25, 0x00,
		0x26, 0x07, 0x00, 0x27, 0x0a, 0x00, 0x04, 0x00, 0x28, 0x07, 0x00, 0x29, 0x0a, 0x00, 0x2a, 0x00, 0x2b, 0x0a, 0x00, 0x08, 0x00, 0x2c, 0x09, 0x00, 0x01, 0x00, 0x2d, 0x0a, 0x00, 0x01,
		0x00, 0x2e, 0x0a, 0x00, 0x01, 0x00, 0x2f, 0x01, 0x00, 0x03, 0x70, 0x74, 0x72, 0x01, 0x00, 0x01, 0x4a, 0x01, 0x00, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x01,
		0x00, 0x26, 0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x3b, 0x4a, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61,
		0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
		0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x07, 0x00, 0x30, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
		0x01, 0x00, 0x04, 0x28, 0x4a, 0x29, 0x56, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x01, 0x00, 0x53, 0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
		0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x4d, 0x65, 0x74,
		0x68, 0x6f, 0x64, 0x3b, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f,
		0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x01, 0x00, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
		0x00, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x01, 0x00, 0x42, 0x28, 0x4a, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
		0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3b, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a,
		0x65, 0x63, 0x74, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x01, 0x00, 0x0e, 0x66, 0x69, 0x6e, 0x61,
		0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x1c, 0x4e, 0x61, 0x74, 0x69,
		0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x1d, 0x70, 0x72, 0x6f,
		0x78, 0x79, 0x2f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x0c, 0x00, 0x16, 0x00,
		0x17, 0x0c, 0x00, 0x31, 0x00, 0x32, 0x01, 0x00, 0x0f, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x07, 0x00, 0x33, 0x0c, 0x00, 0x34,
		0x00, 0x35, 0x01, 0x00, 0x23, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
		0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x0c, 0x00, 0x36, 0x00, 0x37, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
		0x6a, 0x65, 0x63, 0x74, 0x07, 0x00, 0x38, 0x0c, 0x00, 0x39, 0x00, 0x3a, 0x0c, 0x00, 0x16, 0x00, 0x1b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c, 0x00, 0x1c, 0x00, 0x1d, 0x0c, 0x00, 0x1e,
		0x00, 0x17, 0x01, 0x00, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x00, 0x0e, 0x67, 0x65, 0x74,
		0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x01, 0x00, 0x19, 0x28, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61,
		0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x3b, 0x01, 0x00, 0x17, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f,
		0x50, 0x72, 0x6f, 0x78, 0x79, 0x01, 0x00, 0x0d, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x01, 0x00, 0x3c, 0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61,
		0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x3b, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
		0x43, 0x6c, 0x61, 0x73, 0x73, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x3b, 0x01, 0x00, 0x0e, 0x67, 0x65, 0x74,
		0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x01, 0x00, 0x33, 0x28, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x43, 0x6c, 0x61,
		0x73, 0x73, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x6f, 0x72, 0x3b, 0x01, 0x00, 0x1d, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x43, 0x6f, 0x6e, 0x73,
		0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x01, 0x00, 0x0b, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x01, 0x00, 0x27, 0x28, 0x5b, 0x4c, 0x6a, 0x61, 0x76,
		0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
		0x63, 0x74, 0x3b, 0x00, 0x21, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x10, 0x00,
		0x11, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00, 0x64, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0xbb, 0x00, 0x01, 0x59, 0x1f, 0xb7, 0x00, 0x02, 0x4e, 0x2a, 0xb6, 0x00, 0x03,
		0x04, 0xbd, 0x00, 0x04, 0x59, 0x03, 0x2a, 0x53, 0xb8, 0x00, 0x05, 0x3a, 0x04, 0x19, 0x04, 0x04, 0xbd, 0x00, 0x04, 0x59, 0x03, 0x12, 0x06, 0x53, 0xb6, 0x00, 0x07, 0x04, 0xbd, 0x00,
		0x08, 0x59, 0x03, 0x2d, 0x53, 0xb6, 0x00, 0x09, 0xb0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x09, 0x00, 0x0b, 0x00,
		0x0a, 0x00, 0x0c, 0x00, 0x15, 0x00, 0x0b, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x25, 0x00, 0x0f, 0x00, 0x30, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x15, 0x00,
		0x01, 0x00, 0x16, 0x00, 0x17, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x2a, 0xb7, 0x00, 0x0a, 0x2a, 0x1f, 0xb5, 0x00, 0x0b,
		0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x04, 0x00, 0x14, 0x00, 0x09, 0x00, 0x15, 0x00, 0x01, 0x00, 0x18, 0x00,
		0x19, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x23, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x2a, 0x2a, 0xb4, 0x00, 0x0b, 0x2c, 0x2d, 0xb7, 0x00, 0x0c, 0xb0, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01, 0x00, 0x1a, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x25, 0x00, 0x03,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x2a, 0x2a, 0xb4, 0x00, 0x0b, 0xb7, 0x00, 0x0d, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x1d, 0x00, 0x08, 0x00, 0x1e, 0x01, 0x02, 0x00, 0x1c, 0x00, 0x1d, 0x00, 0x00, 0x01, 0x02, 0x00, 0x1e, 0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x02, 0x00,
		0x20
	};

	namespace internal
	{
		void initialize_proxy()
		{
			auto nih = java::load_class("proxy/NativeInvocationHandler", (jbyte*)class_data, sizeof(class_data));

			JNINativeMethod methods[2];
			methods[0].fnPtr = NativeInvocationHandler_invokeNative;
			methods[0].name = "invokeNative";
			methods[0].signature = "(JLjava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;";
			methods[1].fnPtr = NativeInvocationHandler_finalizeNative;
			methods[1].name = "finalizeNative";
			methods[1].signature = "(J)V";
			jni::register_natives(nih.native(), methods, 2);
		}
	}

	object create_proxy(clazz iface, invocation_handler_func handler)
	{
		internal::thread_context* context = (internal::thread_context*)internal::get_tls_value();
		if (!context->vm->prox_class_loaded)
			internal::initialize_proxy();

		clazz nativeHandlerClass("proxy/NativeInvocationHandler");
		return nativeHandlerClass.call_static("makeProxy", iface,
			reinterpret_cast<jlong>(new invocation_handler_func(handler)));
	}
}